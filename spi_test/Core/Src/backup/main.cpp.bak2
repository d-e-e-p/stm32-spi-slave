/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */


#include <locale>
#include <codecvt>

#include <iostream>
#include <cstdio>
#include <string>
#include <vector>


#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdarg.h>
#include <math.h>
#include <fenv.h>
#include <new>


#include "local.hpp"
#include "usbd_cdc_if.h"
#include "stm32f4xx_hal.h"


using namespace std;

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write2(int file, char *ptr, int len) {
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit(ptr, len);
    } while (USBD_BUSY == rc);

    if (USBD_FAIL == rc) {
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
    }
    return len;
}

// Buffer for received data on hspi1
uint8_t receivedData[256];
uint8_t rxData; // Declare a global variable for received data

void SPI2_TransmitTask() {
    // Your data to transmit
    uint8_t dataToSend = 0xAA;
    //uprintf("Transmit data: 0x%02X\n", dataToSend);
    //HAL_Delay(100);

    // Wait until the SPI transmit buffer is empty (TXE flag set)
    //while (__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_TXE) == RESET);

    // Send data over SPI2
    //HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY);

    // Add a delay between transmissions (if needed)
    // osDelay(100); // Adjust the delay as needed
}

// Function to get the descriptive name for an SPI flag
// Function to check and display SPI flags
std::string showSPIFlag() {
    // Get the raw SPI status flags as a 32-bit value
    uint32_t spiFlags = hspi1.Instance->SR;
    if (spiFlags == 0) {
      return "";
    }

    std::string result;

    if (spiFlags & SPI_FLAG_RXNE) {
        result += "+SPI status flag: Rx buffer not empty ";
    }
    if (spiFlags & SPI_FLAG_TXE) {
        result += "+SPI status flag: Tx buffer empty ";
    }
    if (spiFlags & SPI_FLAG_BSY) {
        result += "+SPI status flag: Busy ";
    }
    if (spiFlags & SPI_FLAG_CRCERR) {
        result += "+SPI Error flag: CRC error ";
    }
    if (spiFlags & SPI_FLAG_MODF) {
        result += "+SPI Error flag: Mode fault ";
    }
    if (spiFlags & SPI_FLAG_OVR) {
        result += "+SPI Error flag: Overrun ";
    }
    if (spiFlags & SPI_FLAG_FRE) {
        result += "+SPI Error flag: TI mode frame format error ";
    }

    if (result.empty()) {
        result = "Unknown SPI Flag: " + std::to_string(spiFlags);
    }

    return result;
}

// from https://stackoverflow.com/questions/111928/is-there-a-printf-converter-to-print-in-binary-format
// Assumes little endian
void printBits(size_t const size, void const * const ptr)
{
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte;
    int i, j;

    for (i = size-1; i >= 0; i--) {
        for (j = 7; j >= 0; j--) {
            byte = (b[i] >> j) & 1;
            uprintf("%u", byte);
        }
    }
    uprintf("\n");
}


char* convertToBinary(size_t const size, void const * const ptr) {
    unsigned char *b = (unsigned char*)ptr;
    unsigned char byte;
    int i, j;
    char *binaryString = (char *)malloc(size * 8 + 1); // +1 for null terminator

    if (binaryString == NULL) {
        return NULL; // Memory allocation failed
    }

    char *binaryPtr = binaryString;

    for (i = size - 1; i >= 0; i--) {
        for (j = 7; j >= 0; j--) {
            byte = (b[i] >> j) & 1;
            *binaryPtr++ = '0' + byte; // Convert to character '0' or '1'
        }
    }

    *binaryPtr = '\0'; // Null-terminate the string
    return binaryString;
}


uint8_t rx = 0;
uint8_t tx = 1;
void exchangeSPI(void) {

   //HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
   HAL_StatusTypeDef status;
   //status = HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, HAL_MAX_DELAY) ;
   status = HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10000) ;
   //uint8_t rx0 = hspi1.Instance->DR; // Read and discard received data
   //status = HAL_SPI_Transmit(&hspi1, &rx, 1, HAL_MAX_DELAY) ;
   //status = HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY) ;
   /*
   switch (status) {
     case HAL_OK:       break;
     case HAL_BUSY:     uprintf("SPI T HAL_BUSY\r\n");
     case HAL_ERROR:    uprintf("SPI T HAL_ERROR\r\n");
     case HAL_TIMEOUT:  uprintf("SPI T HAL_TIMEOUT\r\n");
   }
   */
   switch (status) {
     case HAL_OK:       break;
     case HAL_BUSY:     uprintf("SPI R HAL_BUSY\r\n");
     case HAL_ERROR:    uprintf("SPI R HAL_ERROR\r\n");
     case HAL_TIMEOUT:  uprintf("SPI R HAL_TIMEOUT\r\n");
   }
   char *binaryString = convertToBinary(sizeof(rx), &rx);
   uprintf("exchange: %02X : %s : %s\r\n", rx, binaryString, showSPIFlag().c_str());
   tx = rx;
}

void dumpSPIByte(void) {
   
   uint8_t rxBuffer[4];

       // Check if the SPI is busy
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY)) {
      //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // User LED
      //uprintf("# SPI is still busy with the previous operation \r\n");
      // Handle it as needed
    }

    // Check if CRC error flag is set
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_CRCERR)) {
      uprintf("# CRC error detected\r\n");
      // You can also clear the CRC error flag if needed
      __HAL_SPI_CLEAR_CRCERRFLAG(&hspi1);
    }

    // Check if MODF error flag is set
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_MODF)) {
      uprintf("# MODF error detected\r\n");
      // You can also clear the MODF error flag if needed
      __HAL_SPI_CLEAR_MODFFLAG(&hspi1);
    }

    // Check if overrun error flag is set
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_OVR)) {
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // User LED
      uprintf("#  Overrun error detected\r\n");
      // You can also clear the overrun error flag if needed
      __HAL_SPI_CLEAR_OVRFLAG(&hspi1);
    }

    // Check if frame format error flag is set (FRE)
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_FRE)) {
      uprintf("# Frame format error detected\r\n");
      // You can also clear the frame format error flag if needed
      __HAL_SPI_CLEAR_FREFLAG(&hspi1);
    }


   //uprintf("SPI Received data: ");
   //if (HAL_SPI_Receive(&hspi1, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY) != HAL_OK) {
   if (HAL_SPI_Receive(&hspi1, rxBuffer, sizeof(rxBuffer), 1000) != HAL_OK) {
      HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); // User LED
        // Error occurred while receiving data
        uprintf("SPI No data received \r\n");
        //Error_Handler();
    } else {
      // Print received data
      HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin); // User LED
      uint8_t rx_head  = rxBuffer[0];
      uint8_t rx_data0 = rxBuffer[1];
      uint8_t rx_data1 = rxBuffer[2];
      uint8_t rx_crc   = rxBuffer[3];

      std::vector<uint8_t> data = {rx_data0, rx_data1};
      uint8_t crc8 = calculateCRC8(data);

      //uprintf("dumpSPIByte h=%02X d0=%02X d1=%02X c=%02X e=%02X  \r\n", rx_head, rx_data0, rx_data1, rx_crc, crc8);
      char *b_rx_head  = convertToBinary(sizeof(rx_head), &rx_head);
      char *b_rx_data0 = convertToBinary(sizeof(rx_head), &rx_data0);
      char *b_rx_data1 = convertToBinary(sizeof(rx_head), &rx_data1);
      char *b_rx_crc   = convertToBinary(sizeof(rx_head), &rx_crc);
      char *b_crc8     = convertToBinary(sizeof(rx_head), &crc8);
      uprintf("dumpSPIByte h=%s d0=%s d1=%s c=%s e=%s \r\n", b_rx_head, b_rx_data0, b_rx_data1,  b_rx_crc, b_crc8);

      /*
      char *binaryString1 = convertToBinary(sizeof(rx1), &rx1);
      char *binaryString0 = convertToBinary(sizeof(rx0), &rx0);
      uprintf("v: %02X %02X : %s : %s\r\n", rx1, rx0, binaryString1, binaryString0, showSPIFlag().c_str());
    for (uint8_t i = 0; i < sizeof(rxBuffer); i++) {
      while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
      if(HAL_SPI_Transmit(&hspi1, &rxBuffer[i], 1, HAL_MAX_DELAY) != HAL_OK) {
          uprintf("SPI transmit problem %d\r\n", i);
      }
    }
    */

      /*
      for (uint8_t i = 0; i < sizeof(rxBuffer); i++) {
          uprintf("%02X ", rxBuffer[i]);
      }
      uprintf("dumpSPIByte done\r\n");
      */
    }

}


void SPI1_ReceiveTask() {
    while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
      uprintf("// Wait until the SPI1 receive buffer is not empty (RXNE flag set)\r\n");
      HAL_Delay(100);
    }

    // Read received data
    //uint8_t receivedByte = HAL_SPI_Receive(&hspi1, receivedData, 1, HAL_MAX_DELAY);
    uint8_t receivedByte = HAL_SPI_Receive(&hspi1, receivedData, 1, 10000);

    // Process received data (e.g., print it)
    uprintf("Received data: 0x%02X\n", receivedByte);
    printBits(sizeof(receivedByte), &receivedByte);
}

int wcounter = 0;
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
  if (hspi->Instance == SPI1) {
    // SPI1 interrupt callback
    // Data reception is complete

    // Process the received data
    
    char *binaryString = convertToBinary(sizeof(rxData), &rxData);
    uprintf("v= %s\r\n", binaryString);
    HAL_SPI_Transmit(&hspi1, &rxData, 1, HAL_MAX_DELAY);
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // User LED
    /*                                            
    if (wcounter++ == 15) {
       uprintf("\r\n");
       wcounter = 0;
    }
    */

    // Start the next SPI reception
    HAL_SPI_Receive_IT(&hspi1, &rxData, 1);
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim->Instance == TIM2) {
    SPI2_TransmitTask();
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // User LED
    /*
     GPIO_PinState mosiValue = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);

    // Print the value
    if (mosiValue == GPIO_PIN_SET) {
      uprintf("SPI1 MOSI pin is HIGH\r\n");
    } else {
      uprintf("SPI1 MOSI pin is LOW\r\n");
    }
  */

  }

}



uint8_t SPI1_ReceiveByte(void) {
  // Wait for data to be received
  while (!(SPI1->SR & SPI_SR_RXNE));

  // Read and return received data
  return SPI1->DR;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    cout << "c: com port is open\r\n"; HAL_Delay(100);
    HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); // User LED
  MX_SPI1_Init();
    cout << "c: com port is open\r\n"; HAL_Delay(100);
    HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin); // User LED
  MX_USB_DEVICE_Init();
    cout << "c: com port is open\r\n"; HAL_Delay(100);
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // User LED
  MX_TIM2_Init();
    cout << "c: com port is open\r\n"; HAL_Delay(100);
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // User LED
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
  if(CDC_IsComportOpen()) {
    printf("p: com port is open\r\n");
    HAL_Delay(1000);
    uprintf("up: com port is open\r\n");
    HAL_Delay(1000);
    cout << "c: com port is open\r\n"; HAL_Delay(1000);
  } else {
    printf("p: com port state unknown\r\n");
    HAL_Delay(1000);
    uprintf("up: com port state unknown\r\n");
    HAL_Delay(1000);
    cout << "c: com port state unknown\r\n";
    HAL_Delay(1000);
  }

  // Start the timer
  /*
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
    Error_Handler();
  }
  */

  //HAL_SPI_Receive_IT(&hspi1, &rxData, 1); // Receive 1 byte with interrupts

  /*
  // Define the GPIO port and pin you want to configure
GPIO_TypeDef* GPIO_Port = SPI1_MOSI_GPIO_Port; // Replace with your GPIO port
uint16_t GPIO_Pin = SPI1_MOSI_Pin;  // Replace with your GPIO pin

// Create a GPIO_InitTypeDef structure
GPIO_InitTypeDef GPIO_InitStruct;

// Configure the GPIO pin as an output
GPIO_InitStruct.Pin = GPIO_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
GPIO_InitStruct.Pull = GPIO_NOPULL;         // No pull-up/pull-down
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low-speed output

HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct); // Initialize the GPIO pin as an output
                                            //
GPIO_Port = SPI1_MISO_GPIO_Port; // Replace with your GPIO port
GPIO_Pin = SPI1_MISO_Pin;  // Replace with your GPIO pin

// Configure the GPIO pin as an output
GPIO_InitStruct.Pin = GPIO_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Output push-pull
GPIO_InitStruct.Pull = GPIO_NOPULL;     // No pull-up/pull-down
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low-speed output

HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct); // Initialize the GPIO pin as an output
   */


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rx;
  while (true) {
    /* USER CODE END WHILE */

    /*
    // Clear the SPI receive buffer
    if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE)) {
        rx = spi1.Instance->DR; // Read and discard received data
        char *binaryString = convertToBinary(sizeof(rx), &rx);
        uprintf("direct: %02X : %s : %s\r\n", rx, binaryString, showSPIFlag().c_str());
    } else {
        rx = spi1.Instance->DR; // Read and discard received data
        char *binaryString = convertToBinary(sizeof(rx), &rx);
        uprintf("direct no data: %02X : %s : %s\r\n", rx, binaryString, showSPIFlag().c_str());
    }
    */
    //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // User LED
    //HAL_GPIO_TogglePin(SPI1_MOSI_GPIO_Port, SPI1_MOSI_Pin); 

    /*
    // Print the value
     GPIO_PinState mosi = HAL_GPIO_ReadPin(SPI1_MOSI_GPIO_Port, SPI1_MOSI_Pin);
    if (mosi == GPIO_PIN_SET) {
      uprintf("SPI1 MOSI pin is HIGH\r\n");
    } else {
      uprintf("SPI1 MOSI pin is LOW\r\n");
    }

    // Print the value
     GPIO_PinState miso = HAL_GPIO_ReadPin(SPI1_MISO_GPIO_Port, SPI1_MISO_Pin);
    if (miso == GPIO_PIN_SET) {
      uprintf("SPI1 MISO pin is HIGH\r\n");
    } else {
      uprintf("SPI1 MISO pin is LOW\r\n");
    }
    HAL_Delay(1000);
    */


    /* USER CODE BEGIN 3 */
    //uprintf("tst: \r\n");
    //dumpSPIByte();
    exchangeSPI();
    // Receive data from SPI1
    //uint8_t receivedData = SPI1_ReceiveByte();
    //uint8_t rx = HAL_SPI_Receive(&hspi1, &rx, 1, 10000);
    //uprintf("Received data: 0x%02X\r\n", rx);
    //SPI1_ReceiveTask();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_SLAVE;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
/*
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
*/

  /*Configure GPIO pins : BOOT1_Pin PB14 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PD8 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
